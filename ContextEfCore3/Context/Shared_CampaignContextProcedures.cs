// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Context.Model;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace Context.Context
{
    public partial class Shared_CampaignContext
    {
        private Shared_CampaignContextProcedures _procedures;

        public virtual Shared_CampaignContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new Shared_CampaignContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public Shared_CampaignContextProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<campaign_label_find_spResult>().HasNoKey().ToView(null);
        }
    }

    public interface IShared_CampaignContextProcedures
    {
        Task<List<campaign_label_find_spResult>> campaign_label_find_spAsync(DataTable LabelIds, int? CampaignID, int? CampaignIDSort, int? CategoryID, string Name, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
    }

    public partial class Shared_CampaignContextProcedures : IShared_CampaignContextProcedures
    {
        private readonly Shared_CampaignContext _context;

        public Shared_CampaignContextProcedures(Shared_CampaignContext context)
        {
            _context = context;
        }

        public virtual async Task<List<campaign_label_find_spResult>> campaign_label_find_spAsync(DataTable LabelIds, int? CampaignID, int? CampaignIDSort, int? CategoryID, string Name, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "LabelIds",
                    Value = LabelIds ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Structured,
                    TypeName = "[dbo].[IntListType]",
                },
                new SqlParameter
                {
                    ParameterName = "CampaignID",
                    Value = CampaignID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CampaignIDSort",
                    Value = CampaignIDSort ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CategoryID",
                    Value = CategoryID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Name",
                    Size = 150,
                    Value = Name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<campaign_label_find_spResult>("EXEC @returnValue = [dbo].[campaign_label_find_sp] @LabelIds, @CampaignID, @CampaignIDSort, @CategoryID, @Name", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
